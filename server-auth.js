// Simple Express Server with Authentication
const express = require("express");
const cors = require("cors");
const app = express();
const PORT = 3333;

// Enable CORS for React Native
app.use(cors());
app.use(express.json());

// Simple middleware for logging
app.use((req, res, next) => {
  console.log(`${req.method} ${req.path}`);
  next();
});

// Sample users data
let userIdCounter = 1;
const sampleUsers = new Map();

// Sample book data
let bookIdCounter = 4;
const sampleBooks = new Map([
  [
    1,
    {
      _id: "1",
      id: 1,
      title: "React Native р╣Бр╕Ър╕Ър╕Зр╣Ир╕▓р╕вр╣Ж",
      author: "р╕Щр╕▒р╕Бр╕Юр╕▒р╕Тр╕Щр╕▓ A",
      description: "р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й React Native р╕Ир╕▓р╕Бр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щр╕кр╕╣р╣Ир╕Бр╕▓р╕гр╕Юр╕▒р╕Тр╕Щр╕▓р╣Бр╕нр╕Ыр╕Ир╕гр╕┤р╕З",
      price: 299,
      category: "Technology",
      publisher: "р╕кр╕│р╕Щр╕▒р╕Бр╕Юр╕┤р╕бр╕Юр╣Мр╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡",
      isbn: "978-616-123-456-7",
      publishDate: "2024-01-15",
      image:
        "https://via.placeholder.com/300x400/FF6B6B/FFFFFF?text=React+Native",
    },
  ],
  [
    2,
    {
      _id: "2",
      id: 2,
      title: "JavaScript р╕кр╕│р╕лр╕гр╕▒р╕Ър╕бр╕╖р╕нр╣Гр╕лр╕бр╣И",
      author: "р╕Щр╕▒р╕Бр╕Юр╕▒р╕Тр╕Щр╕▓ B",
      description: "р╣Ар╕гр╕╡р╕вр╕Щ JavaScript р╕Ир╕▓р╕Бр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щр╕Ир╕Щр╣Ар╕Ыр╣Зр╕Щр╕бр╕╖р╕нр╕нр╕▓р╕Кр╕╡р╕Ю",
      price: 250,
      category: "Programming",
      publisher: "р╕кр╕│р╕Щр╕▒р╕Бр╕Юр╕┤р╕бр╕Юр╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕бр╕бр╕┤р╣Ир╕З",
      isbn: "978-616-123-457-4",
      publishDate: "2024-02-20",
      image:
        "https://via.placeholder.com/300x400/4ECDC4/FFFFFF?text=JavaScript",
    },
  ],
  [
    3,
    {
      _id: "3",
      id: 3,
      title: "Mobile App Development",
      author: "Developer C",
      description: "р╕Бр╕▓р╕гр╕Юр╕▒р╕Тр╕Щр╕▓р╣Бр╕нр╕Ыр╕бр╕╖р╕нр╕Цр╕╖р╕нр╕нр╕вр╣Ир╕▓р╕Зр╕бр╕╖р╕нр╕нр╕▓р╕Кр╕╡р╕Ю",
      price: 350,
      category: "Mobile",
      publisher: "р╕кр╕│р╕Щр╕▒р╕Бр╕Юр╕┤р╕бр╕Юр╣Мр╕бр╕╖р╕нр╕Цр╕╖р╕н",
      isbn: "978-616-123-458-1",
      publishDate: "2024-03-10",
      image:
        "https://via.placeholder.com/300x400/45B7D1/FFFFFF?text=Mobile+App",
    },
  ],
]);

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    message: "Server is running",
    timestamp: new Date().toISOString(),
  });
});

// Books endpoints
app.get("/api/books", (req, res) => {
  console.log("ЁЯУЪ GET /api/books");
  const books = Array.from(sampleBooks.values());
  res.json({ success: true, books, total: books.length });
});

app.get("/api/books/:id", (req, res) => {
  const { id } = req.params;
  console.log(`ЁЯУЦ GET /api/books/${id}`);

  const book = Array.from(sampleBooks.values()).find(
    (b) => b._id === id || b.id.toString() === id
  );

  if (!book) {
    return res.status(404).json({ success: false, error: "Book not found" });
  }

  res.json({ success: true, book });
});

// POST - Create new book
app.post("/api/books", (req, res) => {
  console.log("ЁЯУЭ POST /api/books", req.body);

  const {
    title,
    author,
    description,
    price,
    category,
    publisher,
    isbn,
    publishDate,
    image,
  } = req.body;

  // Validation
  if (!title || !author || !price) {
    return res.status(400).json({
      success: false,
      error: "Missing required fields",
      message: "р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕░р╕Ър╕╕р╕Кр╕╖р╣Ир╕нр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н р╕Ьр╕╣р╣Йр╣Бр╕Хр╣Ир╕З р╣Бр╕ер╕░р╕гр╕▓р╕Др╕▓",
    });
  }

  // Create new book
  const newId = bookIdCounter++;
  const newBook = {
    _id: newId.toString(),
    id: newId,
    title,
    author,
    description: description || "",
    price: Number(price),
    category: category || "General",
    publisher: publisher || "",
    isbn: isbn || "",
    publishDate: publishDate || new Date().toISOString().split("T")[0],
    image:
      image || "https://via.placeholder.com/300x400/4ECDC4/FFFFFF?text=Book",
    createdAt: new Date().toISOString(),
  };

  sampleBooks.set(newId, newBook);

  res.status(201).json({
    success: true,
    book: newBook,
    message: "р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з",
  });
});

// PUT - Update book
app.put("/api/books/:id", (req, res) => {
  const { id } = req.params;
  console.log(`тЬПя╕П PUT /api/books/${id}`, req.body);

  const bookId = parseInt(id);
  const existingBook = Array.from(sampleBooks.values()).find(
    (b) => b._id === id || b.id === bookId
  );

  if (!existingBook) {
    return res.status(404).json({
      success: false,
      error: "Book not found",
      message: "р╣Др╕бр╣Ир╕Юр╕Ър╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В",
    });
  }

  // Update book data
  const updatedBook = {
    ...existingBook,
    ...req.body,
    id: existingBook.id,
    _id: existingBook._id,
    updatedAt: new Date().toISOString(),
  };

  // Find the actual key and update
  for (const [key, book] of sampleBooks.entries()) {
    if (book._id === id || key === bookId) {
      sampleBooks.set(key, updatedBook);
      break;
    }
  }

  res.json({
    success: true,
    book: updatedBook,
    message: "р╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з",
  });
});

// DELETE - Delete book
app.delete("/api/books/:id", (req, res) => {
  const { id } = req.params;
  console.log(`ЁЯЧСя╕П DELETE /api/books/${id}`);

  const bookId = parseInt(id);
  const existingBook = Array.from(sampleBooks.values()).find(
    (b) => b._id === id || b.id === bookId
  );

  if (!existingBook) {
    return res.status(404).json({
      success: false,
      error: "Book not found",
      message: "р╣Др╕бр╣Ир╕Юр╕Ър╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ъ",
    });
  }

  // Find the actual key and delete
  for (const [key, book] of sampleBooks.entries()) {
    if (book._id === id || key === bookId) {
      sampleBooks.delete(key);
      break;
    }
  }

  res.json({
    success: true,
    message: "р╕ер╕Ър╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з",
    deletedBook: existingBook,
  });
});

// Authentication endpoints
app.post("/api/auth/signup", (req, res) => {
  console.log("ЁЯСд POST /api/auth/signup", req.body);

  const { username, email, password } = req.body;

  if (!username || !email || !password) {
    return res.status(400).json({
      success: false,
      error: "Missing required fields",
      message: "р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕░р╕Ър╕╕р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╣Йр╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ",
    });
  }

  // Check if email already exists
  const existingUser = Array.from(sampleUsers.values()).find(
    (user) => user.email === email
  );
  if (existingUser) {
    return res.status(409).json({
      success: false,
      error: "Email already exists",
      message: "р╕нр╕╡р╣Ар╕бр╕ер╕Щр╕╡р╣Йр╕бр╕╡р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Бр╕ер╣Йр╕з",
    });
  }

  // Create new user
  const newId = userIdCounter++;
  const newUser = {
    _id: newId.toString(),
    id: newId,
    username,
    email,
    password, // In real app, should hash this!
    createdAt: new Date().toISOString(),
  };

  sampleUsers.set(newId, newUser);

  // Return user without password
  const { password: _, ...userWithoutPassword } = newUser;

  res.status(201).json({
    success: true,
    user: userWithoutPassword,
    message: "р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з",
  });
});

app.post("/api/auth/signin", (req, res) => {
  console.log("ЁЯФР POST /api/auth/signin", { email: req.body.email });

  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({
      success: false,
      error: "Missing required fields",
      message: "р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕░р╕Ър╕╕р╕нр╕╡р╣Ар╕бр╕ер╣Бр╕ер╕░р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ",
    });
  }

  const user = Array.from(sampleUsers.values()).find((u) => u.email === email);

  if (!user) {
    return res.status(401).json({
      success: false,
      error: "User not found",
      message: "р╣Др╕бр╣Ир╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Щр╕╡р╣Й",
    });
  }

  if (user.password !== password) {
    return res.status(401).json({
      success: false,
      error: "Invalid password",
      message: "р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З",
    });
  }

  const { password: _, ...userWithoutPassword } = user;

  res.json({
    success: true,
    user: userWithoutPassword,
    message: "р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з",
    token: `fake_token_${user._id}_${Date.now()}`,
  });
});

// Start server
app.listen(PORT, "0.0.0.0", () => {
  console.log(`ЁЯЪА Server running on port ${PORT}`);
  console.log(`\nЁЯУЪ API Endpoints:`);
  console.log(`   GET    /api/books        - р╕Фр╕╣р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н`);
  console.log(`   GET    /api/books/:id    - р╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н`);
  console.log(`   POST   /api/books        - р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Гр╕лр╕бр╣И`);
  console.log(`   PUT    /api/books/:id    - р╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н`);
  console.log(`   DELETE /api/books/:id    - р╕ер╕Ър╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н`);
  console.log(`   GET    /api/health       - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣М`);
  console.log(`\nЁЯФР Authentication Endpoints:`);
  console.log(`   POST   /api/auth/signup  - р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б`);
  console.log(`   POST   /api/auth/signin  - р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ`);

  console.log(`\nЁЯУб Available on:`);
  console.log(`   http://192.168.115.194:${PORT}`);
  console.log(`   http://localhost:${PORT}`);

  console.log(`\nЁЯУЦ Sample books loaded: ${sampleBooks.size} books`);
});
